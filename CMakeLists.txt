CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

SET( PROJECT_NAME HistoReg )

# Set project name and version
PROJECT( ${PROJECT_NAME} )
SET( PROJECT_VERSION_MAJOR 1 )
SET( PROJECT_VERSION_MINOR 0 )
SET( PROJECT_VERSION_PATCH 1 )
SET( PROJECT_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}" CACHE STRING "The project version" FORCE )
ADD_DEFINITIONS(-DPROJECT_VERSION="${PROJECT_VERSION}" )

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED YES) 

OPTION( SUPERBUILD_FORCE "Force ITK Superbuild regardless of whether dependencies are found or not" OFF )

FIND_PACKAGE(ITK)
  
IF((NOT EXISTS ${ITK_USE_FILE}) OR SUPERBUILD_FORCE)
  IF( NOT EXISTS ${PROJECT_BINARY_DIR}/ITK-build/ITKConfig.cmake )

    PROJECT(${PROJECT_NAME}_Depends)
    MESSAGE( STATUS "Starting Superbuild...")
    INCLUDE( ${PROJECT_SOURCE_DIR}/cmake_modules/Superbuild.cmake )
    return()

  ELSE()

    SET( ITK_DIR "${PROJECT_BINARY_DIR}/ITK-build/" CACHE STRING "ITK_DIR Path for use in other builds" FORCE )
    IF (APPLE) 
      SET( ENV{CMAKE_PREFIX_PATH} "${PROJECT_BINARY_DIR}/ITK-build/:$ENV{CMAKE_PREFIX_PATH}" CACHE PATH "" FORCE )
    ELSE()
      SET( ENV{CMAKE_PREFIX_PATH} "${PROJECT_BINARY_DIR}/ITK-build/:$ENV{CMAKE_PREFIX_PATH}" CACHE PATH "" FORCE )
    ENDIF()

  ENDIF()
ENDIF()

#Find libraries
FIND_PACKAGE( ITK REQUIRED )
INCLUDE( ${ITK_USE_FILE} )

# update submodule
IF( NOT EXISTS "${PROJECT_SOURCE_DIR}/greedy/CMakeLists.txt" )
  EXECUTE_PROCESS(COMMAND git submodule update --init ${PROJECT_SOURCE_DIR}/greedy
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  RESULT_VARIABLE git_result
  OUTPUT_VARIABLE git_ver)
ENDIF()

IF( NOT EXISTS "${PROJECT_SOURCE_DIR}/c3d/CMakeLists.txt" )
  EXECUTE_PROCESS(COMMAND git submodule update --init ${PROJECT_SOURCE_DIR}/c3d
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  RESULT_VARIABLE git_result
  OUTPUT_VARIABLE git_ver)
ENDIF()

IF( NOT EXISTS "${PROJECT_SOURCE_DIR}/CBICA_Toolkit/CMakeLists.txt" )
  EXECUTE_PROCESS(COMMAND git submodule update --init ${PROJECT_SOURCE_DIR}/CBICA_Toolkit
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  RESULT_VARIABLE git_result
  OUTPUT_VARIABLE git_ver)
ENDIF()

ADD_SUBDIRECTORY(c3d)
# ADD_SUBDIRECTORY(CBICA_Toolkit)

# add greedy files to compilation
FILE( GLOB_RECURSE GREEDY_HEADERS "${PROJECT_SOURCE_DIR}/greedy/src/*.h" )
FILE( GLOB_RECURSE GREEDY_SOURCES_TEMPLATES_1 "${PROJECT_SOURCE_DIR}/greedy/src/*.hxx" )
FILE( GLOB_RECURSE GREEDY_SOURCES_TEMPLATES_2 "${PROJECT_SOURCE_DIR}/greedy/src/*.txx" )
FILE( GLOB_RECURSE GREEDY_SOURCES_UTILS "${PROJECT_SOURCE_DIR}/greedy/utilities/*.h" )
SET( GREEDY_SOURCES_ALL 
  ${GREEDY_HEADERS} 
  ${GREEDY_SOURCES_TEMPLATES_1} 
  ${GREEDY_SOURCES_TEMPLATES_2} 
  ${GREEDY_SOURCES_UTILS} 
  ${PROJECT_SOURCE_DIR}/greedy/src/AffineCostFunctions.cxx
  ${PROJECT_SOURCE_DIR}/greedy/src/GreedyAPI.cxx
  ${PROJECT_SOURCE_DIR}/greedy/src/GreedyParameters.cxx
  ${PROJECT_SOURCE_DIR}/greedy/src/lddmm_data.cxx
  ${PROJECT_SOURCE_DIR}/greedy/src/MultiImageRegistrationHelper.cxx  
)

INCLUDE_DIRECTORIES(
  ${PROJECT_SOURCE_DIR}/greedy/src/
  ${PROJECT_SOURCE_DIR}/greedy/src/bk
  ${PROJECT_SOURCE_DIR}/greedy/src/dijkstra
  ${PROJECT_SOURCE_DIR}/greedy/src/ITKFilters
  ${PROJECT_SOURCE_DIR}/greedy/src/ITKFilters/include
  ${PROJECT_SOURCE_DIR}/greedy/src/macf
  ${PROJECT_SOURCE_DIR}/greedy/utilities
  # ${PROJECT_SOURCE_DIR}/CBICA_Toolkit/CmdParser/include
  # ${PROJECT_SOURCE_DIR}/CBICA_Toolkit/src/classes
  # ${PROJECT_SOURCE_DIR}/CBICA_Toolkit/src/classes/itk
)

ADD_LIBRARY(GREEDY_LIB ${GREEDY_SOURCES_ALL})
TARGET_LINK_LIBRARIES( GREEDY_LIB ${ITK_LIBRARIES} )

# Add sources to executable
ADD_EXECUTABLE(
  ${PROJECT_NAME} 
  ${CMAKE_CURRENT_SOURCE_DIR}/src/HistoReg.cxx
  #${PROJECT_SOURCE_DIR}/greedy/src/GreedyParameters.cxx
  #${PROJECT_SOURCE_DIR}/greedy/src/GreedyAPI.cxx
  #${GREEDY_SOURCES_ALL}
)

ADD_DEPENDENCIES( ${PROJECT_NAME} GREEDY_LIB )

# Link the libraries to be used
TARGET_LINK_LIBRARIES(
  ${PROJECT_NAME}
  GREEDY_LIB
  ${ITK_LIBRARIES}
)

IF( CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT )
  SET( CMAKE_INSTALL_PREFIX ${PROJECT_BINARY_DIR}/install CACHE PATH "Changed the default install path" FORCE  )
ENDIF( )

INSTALL( TARGETS ${PROJECT_NAME} 
  BUNDLE DESTINATION .
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  CONFIGURATIONS "${CMAKE_CONFIGURATION_TYPES}"
  PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
)
